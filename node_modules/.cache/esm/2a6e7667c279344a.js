let express,registerController,loginController,userController,refreshController,productController,auth,admin;_c27‍.x([["default",()=>_c27‍.o]]);_c27‍.w("express",[["default",["express"],function(v){express=v}]]);_c27‍.w("../controllers",[["registerController",["registerController"],function(v){registerController=v}],["loginController",["loginController"],function(v){loginController=v}],["userController",["userController"],function(v){userController=v}],["refreshController",["refreshController"],function(v){refreshController=v}],["productController",["productController"],function(v){productController=v}]]);_c27‍.w("../middlewares/auth",[["default",["auth"],function(v){auth=v}]]);_c27‍.w("../middlewares/admin",[["default",["admin"],function(v){admin=v}]]);

const router=express.Router();




//login and logout section
router.post('/register', registerController.regirster)
router.post('/login', loginController.login)
router.get('/me',auth, userController.me)
router.post('/refresh', refreshController.refresh)
router.post('/logout',auth, loginController.logout)

router.post('/products/cart-items', productController.getProducts);

//Product Section
router.post('/products', [auth, admin], productController.store);
router.put('/products/:id', [auth, admin], productController.update);
router.delete('/products/:id', [auth, admin], productController.destroy);
router.get('/products',  productController.index);
router.get('/products/:id',  productController.show);




_c27‍.d(router);