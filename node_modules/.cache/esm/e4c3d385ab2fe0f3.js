let joi,User,RefreshToken,CustomErrorHandler,bcrypt,JwtService,REFRESH_SECRET;_ab2‍.x([["default",()=>_ab2‍.o]]);_ab2‍.w("joi",[["default",["joi"],function(v){joi=v}]]);_ab2‍.w("../../models",[["User",["User"],function(v){User=v}],["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}]]);_ab2‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_ab2‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_ab2‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_ab2‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);






const loginController= {
 
        async login(req,resp,next){
            //validation
            const loginSchema= joi.object({
                email: joi.string().email().required(),
                password: joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required()
            });

            const {error} = loginSchema.validate(req.body);

            if(error){
                return next(error);
            }

            try{
                const user= await User.findOne({email: req.body.email});
                if(!user){
                    return next(CustomErrorHandler.wrongCredential());
                }
              //compare the password
           const match= await bcrypt.compare(req.body.password, user.password)    
           
           if(!match){
            return next(CustomErrorHandler.wrongCredential());
           }

           //Tokenk 
         const  access_token=JwtService.sign({_id: user._id, role: user.role, name: user.name})
         
        const refresh_token=JwtService.sign({_id: user._id, role: user.role, name: user.name},'1y',REFRESH_SECRET)
         
         //DatabaseWhitelist        
         await RefreshToken.create({token: refresh_token})
         
         resp.json({access_token, refresh_token});

            } catch (err){
                  return next(err);
            }

        },

      async logout(req,resp,next){
           //validation
           const refreshSchema= joi.object({
            refresh_token: joi.string().required()
         });

         const {error} = refreshSchema.validate(req.body);

         if(error){
             return next(error);
         }

        try{
             await RefreshToken.deleteOne({token: req.body.refresh_token})

        } catch(err){

           return next(new Error('Something went wrong in the database'));
        }
      
        resp.json({status: 1})
    
    }


}


_ab2‍.d(loginController);









