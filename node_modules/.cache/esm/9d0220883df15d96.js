let joi,REFRESH_SECRET,RefreshToken,CustomErrorHandler,JwtService,User;_3df‍.x([["default",()=>_3df‍.o]]);_3df‍.w("joi",[["default",["joi"],function(v){joi=v}]]);_3df‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);_3df‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_3df‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_3df‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);






const refreshController={
 

       async refresh(req,resp,next){
                // validation
                const refreshSchema= joi.object({
                   refresh_token: joi.string().required()
                });
    
                const {error} = refreshSchema.validate(req.body);
    
                if(error){
                    return next(error);
                }

                //database
           
              let refreshtoken;
                try{
                    refreshtoken = await RefreshToken.findOne({token: req.body.refresh_token});
                    if(!refreshtoken){
                        return next(CustomErrorHandler.unAuthorized('Invalid Refresh token'));
                    } 
                    
                    let userId; 
                    try{
                        const {_id } = await JwtService.verify(refreshtoken.token, REFRESH_SECRET);
                        userId = _id;

                    } catch(err){
                        
                        return next(CustomErrorHandler.unAuthorized('Invalid Refresh token'));
                        
                    }
                    
                    const user= User.findOne({_id: userId})
                    if(!user){
                        
                        return next(CustomErrorHandler.unAuthorized('No user found'));
                    }
                  //tokens
                  const  access_token=JwtService.sign({_id: user._id, role: user.role, name: user.name})
         
                  const refresh_token=JwtService.sign({_id: user._id, role: user.role, name: user.name},'1y',REFRESH_SECRET)
                   
                   //DatabaseWhitlist        
                   await RefreshToken.create({token: refresh_token})
                   
                   resp.json({access_token, refresh_token});
                          

           } catch(err){
                 return next(new Error('Something went wrong' + err.message))
           }

       }


}

_3df‍.d(refreshController);











